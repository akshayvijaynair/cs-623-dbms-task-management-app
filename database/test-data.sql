BEGIN;

-- STEP 1: Create 100 users
INSERT INTO "user".users (name, email)
SELECT
    'User ' || i,
    'user' || i || '@example.com'
FROM generate_series(1, 100) AS s(i);

-- STEP 2: Create 1000 tasks, 10 per user (100 users)
INSERT INTO task.user_tasks (
    user_id, title, value, type, status, priority,
    assignee_id, locked_by_id, due_date
)
SELECT
    u.id,  -- user_id (creator)
    'Task Title ' || (10 * (u.id - 1) + i),
    'Generated task description #' || (10 * (u.id - 1) + i),
    (ARRAY['TASK', 'NOTES', 'QUERY', 'BLOCKER']::user_task_type[])[floor(random() * 4 + 1)],
    (ARRAY['OPEN', 'TODO', 'WIP', 'REVIEW', 'DONE', 'CLOSED']::user_task_status[])[floor(random() * 6 + 1)],
    (ARRAY['LOW', 'MEDIUM', 'HIGH', 'URGENT']::user_task_priority[])[floor(random() * 4 + 1)],
    u.id,  -- assignee_id = same as creator
    NULL,  -- locked_by_id
    CURRENT_TIMESTAMP + ((10 * (u.id - 1) + i) || ' minutes')::interval
FROM generate_series(1, 100) AS u(id), generate_series(1, 10) AS i;

-- STEP 3: Add 1–10 comments per task (user_ids 3-7 only)
INSERT INTO task.user_task_comments (note_id, user_id, comment)
SELECT
    t.id,
    (ARRAY[3, 4, 5, 6, 7])[floor(random() * 5 + 1)], -- random user
    'Autogenerated comment #' || j || ' on task #' || t.id
FROM task.user_tasks t,
    LATERAL generate_series(1, floor(random() * 10 + 1)::int) AS j;

-- STEP 4: Add 3–4 history records for first 100 tasks only (user_ids 99, 100)
INSERT INTO task.user_task_histories (user_id, user_task_history, change)
SELECT
    (ARRAY[99, 100])[floor(random() * 2 + 1)],  -- either user 99 or 100
    t.id,
    'Change #' || j || ' on task #' || t.id
FROM (
    SELECT id FROM task.user_tasks ORDER BY id LIMIT 100
    ) AS t,
    LATERAL generate_series(1, floor(random() * 2 + 3)::int) AS j;

-- STEP 5: Update stats
ANALYZE;

COMMIT;