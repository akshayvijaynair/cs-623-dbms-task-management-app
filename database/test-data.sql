BEGIN;

-- Add 100 users
INSERT INTO "user".users (name, email)
SELECT
    'User ' || i,
    'user' || i || '@example.com'
FROM generate_series(1, 100) AS s(i);

-- Add 1000 tasks and link them to users
INSERT INTO task.user_tasks (
    user_id, title, value, type, status, priority,
    assignee_id, locked_by_id, due_date
)
SELECT
    (SELECT id FROM "user".users ORDER BY RANDOM() LIMIT 1),
    'Task Title ' || i,
    'Generated task description #' || i,
     -- enum casting to help with the string type database schema declaration
    (ARRAY['TASK', 'NOTES', 'QUERY', 'BLOCKER']::user_task_type[])[FLOOR(RANDOM()*4 + 1)],
    (ARRAY['OPEN', 'TODO', 'WIP', 'REVIEW', 'DONE', 'CLOSED']::user_task_status[])[FLOOR(RANDOM()*6 + 1)],
    (ARRAY['LOW', 'MEDIUM', 'HIGH', 'URGENT']::user_task_priority[])[FLOOR(RANDOM()*4 + 1)],
    (SELECT id FROM "user".users ORDER BY RANDOM() LIMIT 1),
    CASE WHEN RANDOM() < 0.2 THEN (SELECT id FROM "user".users ORDER BY RANDOM() LIMIT 1) ELSE NULL END,
    CURRENT_TIMESTAMP + (i || ' minutes')::interval
FROM generate_series(1, 1000) AS s(i);

-- Add autogenerated comments
INSERT INTO task.user_task_comments (note_id, user_id, comment)
SELECT
    task_id,
    (SELECT id FROM "user".users ORDER BY RANDOM() LIMIT 1),
    'This is autogenerated comment #' || j || ' for task #' || task_id
FROM (
    SELECT i AS task_id, j
    FROM generate_series(1, 1000) AS i,
    generate_series(1, FLOOR(20 + RANDOM() * 10)::int) AS j
    ) AS gen;

-- add historical data of changes
INSERT INTO task.user_task_histories (user_id, user_task_history, change)
SELECT
    (SELECT id FROM "user".users ORDER BY RANDOM() LIMIT 1),
    task_id,
    'Auto-change #' || j || ' on task #' || task_id
FROM (
    SELECT i AS task_id, j
    FROM generate_series(1, 1000) AS i,
    generate_series(1, FLOOR(5 + RANDOM() * 2)::int) AS j
    ) AS gen;

-- Update planner statistics
ANALYZE;

COMMIT;